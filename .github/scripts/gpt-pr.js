import { Octokit } from "@octokit/rest";
import OpenAI from "openai";
import { ChromaClient } from "chromadb";
import https from "https";

const issueNumber = process.argv[2];

if (!issueNumber) {
    console.error("Issue number is required!");
    process.exit(1);
}

// GitHub
const octokit = new Octokit({ auth: process.env.GH_PAT });
const [owner, repo] = process.env.GITHUB_REPOSITORY.split("/");

// OpenAI
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

// ChromaDB (–ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä)
const chroma = new ChromaClient({
    path: `http://${process.env.CHROMADB_HOST}:${process.env.CHROMADB_PORT}`,
    fetchOptions: {
        headers: { Authorization: `Bearer ${process.env.CHROMADB_TOKEN}` },
        agent: new https.Agent({ rejectUnauthorized: false }),
    },
});

// –ü–æ–ª—É—á–∞–µ–º Issue
async function getIssue() {
    const { data } = await octokit.issues.get({
        owner,
        repo,
        issue_number: issueNumber,
    });
    return data;
}

// –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ 1536 –æ—Ç OpenAI
async function getEmbedding(text) {
    const response = await openai.embeddings.create({
        model: "text-embedding-3-small", // 1536
        input: text,
    });
    return response.data[0].embedding;
}

// –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∫–æ–¥–∞ –≤ ChromaDB
async function searchCode(query) {
    const collection = await chroma.getCollection({ name: "openai-carp-travel" });

    const embedding = await getEmbedding(query);

    const results = await collection.query({
        queryEmbeddings: [embedding],
        nResults: 30,
        include: ["documents", "metadatas", "distances"],
    });


    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤ {path, content}
    const files = results.documents[0].map((doc, idx) => ({
        path: results.metadatas[0][idx]?.file_path || `unknown-${idx}.txt`,
        content: doc,
    }));

    console.log("üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:", files.length);
    files.forEach(f => {
        console.log("–§–∞–π–ª:", f.path);
        console.log("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ (–ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤):", f.content.slice(0, 300));
        console.log("----");
    });
}

// –ü–∞—Ä—Å–∏–Ω–≥ JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞ GPT
function parseGPTJSON(text) {
    const match = text.match(/\[.*\]/s); // –∏—â–µ–º JSON –º–∞—Å—Å–∏–≤
    if (!match) return [];
    try {
        return JSON.parse(match[0]);
    } catch (err) {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç GPT:", err);
        console.log("GPT –æ—Ç–≤–µ—Ç:\n", text);
        return [];
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —á–µ—Ä–µ–∑ GPT
async function generateChanges(issue, relevantFiles) {
    const prompt = `
–ó–∞–¥–∞—á–∞: ${issue.title}
–û–ø–∏—Å–∞–Ω–∏–µ: ${issue.body}

–í–æ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –∫–æ–¥–∞ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:
${relevantFiles.map(f => `–§–∞–π–ª: ${f.path}\n${f.content}`).join("\n\n")}

–ü—Ä–µ–¥–ª–æ–∂–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ—à–∞—Ç –∑–∞–¥–∞—á—É. 
–°—Ñ–æ—Ä–º–∏—Ä—É–π –æ—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
[
  {
    "path": "<–ø—É—Ç—å –∫ —Ñ–∞–π–ª—É>",
    "content": "<–Ω–æ–≤—ã–π –∫–æ–¥ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π>"
  }
]
–ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –¥–∞–∂–µ –µ—Å–ª–∏ —è –∏—Ö –Ω–µ —É–∫–∞–∑–∞–ª —Ç–æ—á–Ω–æ.
`;

    const response = await openai.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [{ role: "user", content: prompt }],
        max_tokens: 2000,
    });

    return parseGPTJSON(response.choices[0].message.content);
}

// –°–æ–∑–¥–∞–µ–º Pull Request
async function createPR(branchName, changes, issueTitle) {
    const masterRef = await octokit.git.getRef({ owner, repo, ref: "heads/master" });

    await octokit.git.createRef({
        owner,
        repo,
        ref: `refs/heads/${branchName}`,
        sha: masterRef.data.object.sha,
    });

    for (const file of changes) {
        try {
            const { data: fileData } = await octokit.repos.getContent({
                owner,
                repo,
                path: file.path,
                ref: "master",
            });

            await octokit.repos.createOrUpdateFileContents({
                owner,
                repo,
                path: file.path,
                message: `AI PR for Issue #${issueNumber}`,
                content: Buffer.from(file.content).toString("base64"),
                branch: branchName,
                sha: fileData.sha,
            });
        } catch (err) {
            await octokit.repos.createOrUpdateFileContents({
                owner,
                repo,
                path: file.path,
                message: `AI PR for Issue #${issueNumber}`,
                content: Buffer.from(file.content).toString("base64"),
                branch: branchName,
            });
        }
    }

    const { data: pr } = await octokit.pulls.create({
        owner,
        repo,
        head: branchName,
        base: "master",
        title: `AI PR for Issue #${issueNumber}`,
        body: `AI –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏: ${issueTitle}`,
    });

    console.log(`Pull Request created: ${pr.html_url}`);
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async function main() {
    const issue = await getIssue();
    const relevantFiles = await searchCode(issue.title);
    // const changes = await generateChanges(issue, relevantFiles);

    // if (changes.length === 0) {
    //     console.log("GPT –Ω–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Ñ–∞–π–ª–æ–≤.");
    //     return;
    // }
    //
    // const branchName = `ai-issue-${issueNumber}`;
    // await createPR(branchName, changes, issue.title);
}

main().catch(console.error);




